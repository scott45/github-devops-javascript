name: Auto-Update Wiki & Project
on:
  push:
    branches: [ "dev", "main" ]  # Trigger on PRs targeting dev
  pull_request:
    types: [opened, reopened, closed]
jobs:
  update:
    if: github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install GH CLI
        run: |
          sudo apt update && sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
          sudo apt update && sudo apt install gh -y
          gh auth login --with-token <<< ${{ secrets.DEMO_GITHUB_TOKEN }}
      - name: Auto-Update Wiki (Issues + PRs)
        env:
          GH_TOKEN: ${{ secrets.DEMO_GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          mkdir -p wiki

          # Open / Closed Issues
          ISSUES_OPEN=$(gh issue list --state open   --json title,createdAt       --jq '.[] | "- \(.title) (Created: \(.createdAt))"' || true)
          ISSUES_CLOSED=$(gh issue list --state closed --json title,createdAt     --jq '.[] | "- \(.title) (Created: \(.createdAt))"' || true)

          # Open / Merged PRs
          PRS_OPEN=$(gh pr list --state open     --json title,createdAt           --jq '.[] | "- \(.title) (Opened: \(.createdAt))"' || true)
          PRS_MERGED=$(gh pr list --state merged --json title,mergedAt            --jq '.[] | "- \(.title) (Merged: \(.mergedAt))"'  || true)

          # Fallback text if lists are empty
          [ -n "$ISSUES_OPEN"  ] || ISSUES_OPEN="(none)"
          [ -n "$ISSUES_CLOSED"] || ISSUES_CLOSED="(none)"
          [ -n "$PRS_OPEN"     ] || PRS_OPEN="(none)"
          [ -n "$PRS_MERGED"   ] || PRS_MERGED="(none)"

          cat > wiki/Home.md <<'EOF'
          # Project Updates

          ## To-Do
          ### Issues
          __ISSUES_OPEN__
          ### Pull Requests
          __PRS_OPEN__

          ## Done
          ### Issues (Closed)
          __ISSUES_CLOSED__
          ### Pull Requests (Merged)
          __PRS_MERGED__
          EOF

          # Inject the dynamic lists
          sed -i 's|__ISSUES_OPEN__|'"$(printf '%s\n' "$ISSUES_OPEN"  | sed 's/[&/\]/\\&/g')"|g' wiki/Home.md
          sed -i 's|__ISSUES_CLOSED__|'"$(printf '%s\n' "$ISSUES_CLOSED"| sed 's/[&/\]/\\&/g')"|g' wiki/Home.md
          sed -i 's|__PRS_OPEN__|'"$(printf '%s\n' "$PRS_OPEN"       | sed 's/[&/\]/\\&/g')"|g' wiki/Home.md
          sed -i 's|__PRS_MERGED__|'"$(printf '%s\n' "$PRS_MERGED"    | sed 's/[&/\]/\\&/g')"|g' wiki/Home.md

          # Clone wiki repo
          git clone "https://${{ github.actor }}:${GH_TOKEN}@github.com/${{ github.repository }}.wiki.git" wiki-temp || {
            echo "Error: Wiki repo not found. Please initialize the wiki in the GitHub UI (Wiki tab)."
            exit 1
          }

          cp wiki/Home.md wiki-temp/
          cd wiki-temp

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Detect wiki default branch (master/main)
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          git checkout "$DEFAULT_BRANCH" || git checkout -b "$DEFAULT_BRANCH"

          git add .
          TS=$(date -u +"%Y%m%d%H%M%S")
          git commit -m "docs: auto-update wiki [run $TS]" || { echo "No changes to commit"; exit 0; }
          git push "https://${{ github.actor }}:${GH_TOKEN}@github.com/${{ github.repository }}.wiki.git" "$DEFAULT_BRANCH"

      - name: Auto-Update Project
        if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'dev'
        run: |
          ISSUE_NUMBER=${{ github.event.pull_request.number }}
          PR_BODY=$(gh pr view $ISSUE_NUMBER --json body --jq '.body')
          LINKED_ISSUE_NUM=$(echo "$PR_BODY" | grep -oE 'Closes #([0-9]+)' | sed 's/Closes #//g' | head -n1)
          if [ -n "$LINKED_ISSUE_NUM" ]; then
            ISSUE_ID=$(gh api graphql -f query="query { repository(owner: \"${{ github.repository_owner }}\", name: \"${{ github.repository_name }}\") { issue(number: $LINKED_ISSUE_NUM) { id } } }" --jq '.data.repository.issue.id')
            gh api graphql -f query="mutation { updateProjectV2ItemFieldValue(input: { projectId: \"${{ secrets.PROJECT_ID }}\", itemId: \"$ISSUE_ID\", fieldId: \"${{ secrets.STATUS_FIELD_ID }}\", value: { singleSelectOptionId: \"${{ secrets.DONE_OPTION_ID }}\" } }) { projectV2Item { id } } }"
          else
            echo "No linked issue found in PR body (e.g., 'Closes #X'). Skipping project update."
          fi
